#!/bin/bash
#
#       Copyright (C) MOXA Inc. All rights reserved.
#       Copyright (C) 2016 Wes Huang <Wes.Huang@moxa.com>
#
#       This software is distributed under the terms of the
#       MOXA License.  See the file COPYING-MOXA for details.
#

. /etc/mx-security/mxsec_functions

backup-sys-encrypt () {
	local backup_path=$1
	local password1=""
	local password2=""
	local backup_time=$(date +"%y%m%d%H%M%S")
	local confirm=""

	check_backup_path $backup_path

        echo -n -e "Do you wnat to backup the whole root file system into $backup_path directory? (y/N)"
        read confirm
        if [ X"$confirm" != X"Y" ] && [ X"$confirm" != X"y" ]; then
                exit 0
        fi

	echo "The utility is going to backup the whole root file system with encryption."
	echo -ne "Please, enter aes-256-cbc encryption password:"
	read password1
	echo -ne "Please, enter it again.(verifying) :"
	read password2
	
	if [[ X"$password1" != X"$password2" ]]; then
		echo -ne "The password is different! "
		exit 1
	fi

	cd /
	ls / | grep -v -E '(proc|sys|dev|mnt|run|media)' | xargs tar -zcvf /tmp/backup_${backup_time}.tar.gz
	openssl aes-256-cbc -salt -k ${password1} -in /tmp/backup_${backup_time}.tar.gz -out ${backup_path}/backup_${backup_time}.tar.gz.encrypt
	md5sum "${backup_path}/backup_${backup_time}.tar.gz.encrypt" >> /etc/mx-security/mx-security.conf.d/backup_checksum
	rm -rf /tmp/backup_${backup_time}.tar.gz
}

restore-sys-encrypt () {
	local confirm=""
	local backup_file_path=$1

	check_backup_path $backup_file_path

	echo "Checking backup file's checksum. Please wait..."
	check_file_checksum $backup_file_path
	
	echo "Note: Don't stop the process while it is restoring the system. The system will reboot after the restore process is finished."
        echo -n -e "Do you wnat to restore the whole root file system by $backup_file_path file? (y/N)"
        read confirm
        if [ X"$confirm" != X"Y" ] && [ X"$confirm" != X"y" ]; then
                exit 0
        fi

	echo "The utility is going to decryption the backup file."
	echo -ne "Please, enter aes-256-cbc encryption password:"
	read password1
	echo -ne "Please, enter it again.(verifying) :"
	read password2
	
	if [[ X"$password1" != X"$password2" ]]; then
		echo -ne "The password is different! "
		exit 1
	fi
	
	USB_DIR=$(df -h | grep /dev/sd | awk '{print $6}')
	openssl aes-256-cbc -salt -k ${password1} -d -in $backup_file_path -out ${USB_DIR}/temp_backup_file.tar.gz
	
	create_restore_process "${USB_DIR}/temp_backup_file.tar.gz"
	install_file "mxsec_setdef" "level1"
	sed -i "/sync/i rm -rf ${USB_DIR}/temp_backup_file.tar.gz" /sbin/mxsec_setdef
	bash /sbin/mxsec_setdef
}

case "$1" in
	backup-sys-encrypt)
		backup-sys-encrypt $2
		;;
	restore-sys-encrypt)
		restore-sys-encrypt $2
		;;
	*)
		echo -n -e "The parameter is incorrect."
		exit 1
		;;
esac

exit 0

